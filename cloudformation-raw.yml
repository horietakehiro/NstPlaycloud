AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  This is the template for deploying NstPlaycloud app.

Parameters:
  RDSUsername:
    Description: test
    Type: String
    Default: nstpcadmin
  RDSPassword:
    Description: test
    Type: String
    Default: nstpcpass

  WebUsename:
    Description: test
    Type: String
    Default: nstpc-admin
  WebPassword:
    Description: test
    Type: String
    Default: nstpc-pass
  WebEmail:
    Description: test
    Type: String
    Default: nstpc@nstcp.com


Resources:
### Networks
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: 
        Ref: Vpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "ap-northeast-1a"
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: 
        Ref: Vpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "ap-northeast-1c"
      MapPublicIpOnLaunch: true
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: 
        Ref: Vpc
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "ap-northeast-1c"
      MapPublicIpOnLaunch: false
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: 
        Ref: Vpc
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "ap-northeast-1d"
      MapPublicIpOnLaunch: false
  Igw:
    Type: 'AWS::EC2::InternetGateway'
  IgwAttachToVpc:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: 
        Ref: Igw 
      VpcId:
        Ref: Vpc
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: 
        Ref: Vpc 
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      GatewayId: 
        Ref: Igw 
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: 
        Ref: PublicRouteTable
      SubnetId: 
        Ref: PublicSubnet1
  RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: 
        Ref: PublicRouteTable
      SubnetId: 
        Ref: PublicSubnet2


### Database
  RDSCluster: 
    Type: "AWS::RDS::DBCluster"
    Properties: 
      DBClusterParameterGroupName: 
        Ref: RDSDBClusterParameterGroup
      DBSubnetGroupName: 
        Ref: DBSubnetGroup
      Engine: aurora-postgresql
      MasterUserPassword:
        Ref: RDSPassword
      MasterUsername: 
        Ref: RDSUsername
      VpcSecurityGroupIds:
        - Ref: RDSSecurityGroup

  RDSDBClusterParameterGroup: 
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties: 
      Description: "test"
      Family: aurora-postgresql11
      Parameters: 
        timezone: US/Eastern
  
  RDSDBInstance: 
    Type: "AWS::RDS::DBInstance"
    Properties: 
      AvailabilityZone: 
        Fn::GetAtt:
          - PrivateSubnet1
          - AvailabilityZone
      DBClusterIdentifier: 
        Ref: RDSCluster
      DBInstanceClass: db.t3.medium
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: 
        Ref: DBSubnetGroup
      Engine: aurora-postgresql
      PubliclyAccessible: false

  RDSDBParameterGroup: 
    Type: "AWS::RDS::DBParameterGroup"
    Properties: 
      Description: "test"
      Family: aurora-postgresql11

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "test"
      DBSubnetGroupName: db-subnet-group
      SubnetIds: 
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RDSAccessSG
      GroupDescription: test
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
  

### Frontend
  BeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: frontend
      Description: AWS Elastic Beanstalk Sample Application
  BeanstalkApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: BeanstalkApplication
      Description: AWS ElasticBeanstalk Sample Application Version
      SourceBundle:
        S3Bucket: "elasticbeanstalk-nstpc-ap-northeast-1"
        S3Key: frontend.zip
  BeanstalkConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: BeanstalkApplication
      Description: AWS ElasticBeanstalk Sample Configuration Template
      SolutionStackName: "64bit Amazon Linux 2018.03 v2.9.14 running Python 3.6"
      OptionSettings:
        - Namespace: aws:ec2:instances
          OptionName: InstanceTypes
          Value: t2.micro
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value:
            Ref: Vpc
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value:
            Fn::Join: 
              - ","
              - - Ref: PublicSubnet1
                - Ref: PublicSubnet2

        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value:
            Fn::Join: 
              - ","
              - - Ref: PublicSubnet1
                - Ref: PublicSubnet2
        - Namespace: aws:ec2:vpc
          OptionName: AssociatePublicIpAddress
          Value: true
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value:
            Fn::GetAtt: [BeanstalkServiceRole, Arn]
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: IamInstanceProfile
          Value:
            Fn::GetAtt: [BeanstalkInstanceProfile, Arn]

        - Namespace: 'aws:autoscaling:asg'
          OptionName: MinSize
          Value: 1
        - Namespace: 'aws:autoscaling:asg'
          OptionName: MaxSize
          Value: 2

        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: AWS_AURORA_HOST
          Value:
            Fn::GetAtt: [RDSCluster, Endpoint.Address]
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: AWS_AURORA_PORT
          Value: "3306"
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: AWS_AURORA_NAME
          Value: "postgres"
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: AWS_AURORA_USER
          Value:
            Ref: RDSUsername
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: AWS_AURORA_PASSWORD
          Value:
            Ref: RDSPassword
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: DJANGO_SUPERUSER_USERNAME
          Value:
            Ref: WebUsename
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: DJANGO_SUPERUSER_EMAIL
          Value:
            Ref: WebEmail
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: DJANGO_SUPERUSER_PASSWORD
          Value:
            Ref: WebPassword

  BeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - elasticbeanstalk.amazonaws.com
          Action:
          - sts:AssumeRole
          Condition:
            StringEquals:
              "sts:ExternalId": "elasticbeanstalk"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  BeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: BeanstalkEC2Role
  BeanstalkEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier

  BeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn: 
      - RDSCluster
      - RDSDBInstance
    Properties:
      ApplicationName:
        Ref: BeanstalkApplication
      Description: AWS ElasticBeanstalk Sample Environment
      TemplateName:
        Ref: BeanstalkConfigurationTemplate
      VersionLabel:
        Ref: BeanstalkApplicationVersion

### Lambda
  ImageUtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: artifacts/image-util-layer/ImageUtilLayer/
      CompatibleRuntimes:
        - python3.6
    Metadata:
      BuildMethod: python3.6

  ThumbnailCreationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: artifacts/thumbnail-creation/ThumbnailCreationFunction/
      Handler: app.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Layers:
        - Ref: ImageUtilLayer
      Role:
        Fn::GetAtt: [LambdaExecRoke, Arn]
      Events:
        ThumbnailCreation:
          Type: S3
          Properties:
            Bucket:
              Ref: AppBucket
            Events: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .png
                - Name: prefix
                  Value: media/original/
  ImageDeletionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: artifacts/image-deletion/ImageDeletionFunction/
      Handler: app.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Layers:
        - Ref: ImageUtilLayer
      Role:
        Fn::GetAtt: [LambdaExecRoke, Arn]
      Events:
        ImageDeletion:
          Type: SQS
          Properties:
            Queue: 
              Fn::GetAtt: [DeleteQueue, Arn]
            BatchSize: 10
  MaskingCreationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: artifacts/masking-creation/MaskingCreationFunction/
      Handler: app.lambda_handler
      Runtime: python3.6
      Timeout: 10
      Layers:
        - Ref: ImageUtilLayer
      Role:
        Fn::GetAtt: [LambdaExecRoke, Arn]
      Events:
        MaskingCreationApi:
          Type: Api
          Properties:
            Path: /masking
            Method: post
  LambdaExecRoke:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

### S3
  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nstpc
  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: AppBucket
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - "s3:GetObject"
              - "s3:GetObjectVersion"
            Effect: "Allow"
            Resource: 
              Fn::Join: 
                - ""
                - 
                  - "arn:aws:s3:::"
                  - 
                    Ref: AppBucket
                  - "/*"
            Principal: "*"

### SQS
  DeleteQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: nstpc-delete
  TransferQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: nstpc-transfer

### Backend
